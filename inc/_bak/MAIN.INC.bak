procedure Configure;
	var
	iniFile: TMemIniFile;
	sl: TStringList;
	i, v: Integer;

	begin
	iniFile:= TMemIniFile.Create('config.ini');
	sl:= TStringList.Create;
	try
//		Read debug section settings
		iniFile.ReadSectionValues('DEBUG', sl);

//		Get ErrorLog setting
		i:= sl.IndexOfName('ErrorLog');
		if  (i = -1)
		or  (not TryStrToInt(sl.ValueFromIndex[i], v))
		or  (v = 0) then
			LogErrors:= False
		else
			begin
			LogErrors:= True;
			AssignFile(LogFile, 'errorlog.log');
			if not FileExists('errorlog.log') then
				Rewrite(LogFile)
			else
				Append(LogFile);

			Writeln(LogFile);
			MoriaLog(mlrInform, '--- Program starting');
			end;

//		Get SaveOnLevel setting
		i:= sl.IndexOfName('SaveOnLevel');
		if  (i = -1)
		or  (not TryStrToInt(sl.ValueFromIndex[i], v))
		or  (v = 0) then
			DebugSaveOnLevel:= False
		else
			begin
			DebugSaveOnLevel:= True;
			MoriaLog(mlrInform, '--- Enabling Debug SaveOnLevel');
			end;

//		Read screen settings
		iniFile.ReadSectionValues('SCREEN', sl);

//		Get screen mode (default to black and white)
		i:= sl.IndexOfName('Mode');
		if (i = -1)
		or (not TryStrToInt(sl.ValueFromIndex[i], v)) then
			screen.ScreenMode:= ssmBlackWhite
		else
			screen.ScreenMode:= TScreenMode(v);

//		Get cursor type
		i:= sl.IndexOfName('LargeCursor');
		if (i = -1)
		or (not TryStrToInt(sl.ValueFromIndex[i], v)) then
			screen.CursorSizeNormal
		else
			screen.CursorSizeBig;

		screen.ClrScr;

		finally
		sl.Free;
		iniFile.Free;
		end;

	if ParamCount > 0 then
		if ParamStr(ParamCount) <> '/WIZARD' then
			finam:= ShortString(ParamStr(ParamCount));
	end;

procedure Initialise;
	begin
{	Some neccesary initializations }
	msg_line    := 1;
	quart_height:= screen_height div 4;
	quart_width := screen_width div 4;
	dun_level   := 0;

	{ Grab a random seed from the clock }
	//seed:= get_seed;
	SetSeed(get_seed);

	read_data;

	{ Sort the objects by level }
	sort_objects;

	{ Init monster and treasure levels for allocate }
	init_m_level;
	init_t_level;

	{ Init the store inventories }
	store_init;

//todo Implement difficulty settings
	//if (COST_ADJ <> 1.00) then
	//	price_adjust;

	SetLength(newInventory[mitWornWielding], Succ(Ord(High(TMoriaInvenWear))));
	end;

procedure Finalise;
	var
	i: TMoriaInvenType;

	begin
	for i:= High(TMoriaInvenType) downto Low(TMoriaInvenType) do
		SetLength(newInventory[i], 0);
	end;

procedure TopTwentyItmCallback(const AListView: TScrListView;
		const AScreen: TCustomSimpleScreen; const APosition: TScreenPos;
		const ATab: Integer; const APage: Integer; const AItem: Integer;
		const AData: Pointer);
	type
	PText = ^Text;

	var
	f1: PText;
	l: VType;

	begin
	f1:= PText(AData);
	if not Eof(f1^) then
		Readln(f1^, l)
	else
		l:= '';

	screen.Writeln(l);
	end;

procedure DisplayTopTwenty;
	var
	f1: Text;
//	n1: Integer;
//	l: VType;
	dummy: AnsiChar;
	lst: TScrListView;
	p: TScreenPos;

	begin
	clear(1, 1);

//	prt('- M O R I A   T O P   T W E N T Y -', STR_CLR_NMHHLT, 1, 22);
//	screen.Writeln;
//	screen.writeln('Username       Points  Character that died.');

	AssignFile(f1, string(moria_top));
	Reset(f1);

//	n1:= 1;

	if IOResult = 0 then
		begin
		lst:= TScrListView.Create(screen, nil, TopTwentyItmCallback,
				Pointer(@f1));
		try
			p.X:= 1;
			p.Y:= 3;
			lst.Position:= p;
			lst.Title:= '                      - M O R I A   T O P   T W E N T Y -';
			lst.Heading:= 'Username       Points  Character that died.';
			lst.PageSize:= 20;
			lst.ItemCount:= 20;
			lst.ShowCurrent:= False;
			lst.Display;

(*			while ((not eof(f1)) and (n1 <= 20)) do
				begin
				Readln(f1, l);
				n1 := n1 + 1;

				screen.Writeln(l);
				end;*)
			finally
			lst.Free;
			end;

		CloseFile(f1);
		end;

	prt('[Press Any Key to Continue]', STR_CLR_NMHHLT, 24, 26);
	inkey(dummy);
	end;

{ Attempt to open the intro file }
//[psect(setup$code)]
procedure Intro;//(var finam: vtype);
	var
//	xpos,
//	i1: Integer;
//	dummy: AnsiChar;
//	day_test,
	in_line: VType;
	file1: Text;
	file2: file of Key_Type;
	exit_flag: Boolean;
	cf: Boolean;
	i: Integer;

	begin
	i:= 1;
	cf:= False;
	exit_flag:= false;
	clear(1, 1);

//dengland  There was a bug in DCC XE2 causing the string data in MORIA_MOR to
//		be lost.  I've corrected it now (by declaring the values in the variable
//		initialisation) but I don't know what caused it.
//	OutputDebugString(PWideChar('MORIA_MOR: ' + string(MORIA_MOR)));

//dengland  In Delphi XE2, the compiler does an implicit cast.  Make it explicit
//		so that the warning goes away (I don't like them).
	AssignFile(file1, string(MORIA_MOR));
	Reset(file1);
//	if (status(file1) = 0) then
	if (IOResult = 0) then
		begin
		if (not(exit_flag)) then
			begin
			screen.BeginUpdate;
			try
				repeat
					Readln(file1, in_line);
					if  (Length(in_line) > 0)
					and (in_line[1] = '#') then
						begin
						cf:= True;
						Continue;
						end;

					if not cf then
						screen.Writeln(in_line)
					else
						DecodeClrTextToScreen(in_line, i);

					until (eof(file1));

				finally
				screen.EndUpdate;
				end;

			pause_exit(24, 0);
			CloseFile(file1);
			end
		else
			CloseFile(file1);
		end
	else { Create one. }
		begin
		Rewrite(file1);
		if (IOResult = 0) then
			begin
//todo This should come before the file open and read above with a test for FileExists.

			writeln(file1, '                       *************************');
{$IFDEF DCC}
			in_line:= System.AnsiStrings.Format(
{$ELSE}
			in_line:= Format(
{$ENDIF}
					'                       **    Moria  UB %2d.%2d   **',
					[CUR_VERSION_MAJ, CUR_VERSION_MIN]);

			writeln(file1, in_line);
			writeln(file1, '                       *************************');
			writeln(file1, '                   COPYRIGHT (c) Robert Alan Koeneke');
			writeln(file1, ' ');
			writeln(file1, 'Programers : Robert Alan Koeneke / University of Oklahoma');
			writeln(file1, '             Jimmey Wayne Todd   / University of Oklahoma');
			writeln(file1, ' ');
			writeln(file1, ' ');
			writeln(file1, 'Modified by: Bill Palter     / State University of New York');
			writeln(file1, '             Nick B Triantos / State University of New York');
			writeln(file1, '                                                           ');
			Writeln(file1, 'Ported to Delphi/Free Pascal by: ');
			Writeln(file1, '             Daniel England');
			writeln(file1, ' ');
			writeln(file1, 'Dungeon Master: This file may contain updates and news.');
			CloseFile(file1);
			screen.Writeln('Created ', MORIA_MOR);
			exit_flag:= true;
			end
		else
			begin
			screen.Writeln('Error in creating ', MORIA_MOR);
//			Halt(0);
			raise EMoriaTerminate.Create('Could Not Create Intro File');
			end;
		end;

//dengland  In Delphi XE2, the compiler does an implicit cast.  Make it explicit
//		so that the warning goes away (I don't like them).
	AssignFile(file2, string(MORIA_MAS));
	Reset(file2);
	if (IOResult <> 0) then
		begin
		Rewrite(file2);
		if (IOResult = 0) then
			begin
			screen.Writeln('Created ', moria_mas);
			CloseFile(file2);
			exit_flag:= true;
			end
		else
			begin
			screen.Writeln('Error in creating ', moria_mas);
//			Halt(0);
			raise EMoriaTerminate.Create('Could Not Create Master File');
			end;
		end
	else
		CloseFile(file2);

{ Check for TOPTWENTY.DAT}

//dengland  In Delphi XE2, the compiler does an implicit cast.  Make it explicit
//		so that the warning goes away (I don't like them).
	AssignFile(file1, string(MORIA_TOP));
	Reset(file1);
//	if ((status(file1) <> 0) and (status(file1) <> 2)) then
//dengland I don't know what status 2 would have been.
	if (IOResult <> 0) then
		begin
		Rewrite(file1);
		if (IOResult = 0) then
			begin
			screen.Writeln('Created ', moria_top);
			CloseFile(file1);
			exit_flag:= true;
			end
		else
			begin
			screen.Writeln('Error in creating ', moria_top);
//			Halt(0);
			raise EMoriaTerminate.Create('Could Not Open Top Twenty File');
			end;
		end
	else
		CloseFile(file1);

	if (exit_flag) then
		begin
		screen.Writeln('Notice: System MORIA wizard should set the protection');
		screen.Writeln('        on  files  just created.  See INSTALL.HLP for');
		screen.Writeln('        help on setting protection on the files.');
		screen.Writeln('Notice: File MORIA.DAT may be edited to contain  news');
		screen.Writeln('        items, etc...');
//		Halt(0);
		raise EMoriaTerminate.Create('General File Error');
		end;

	if Length(finam) = 0 then
		DisplayTopTwenty;
	end;

procedure Start;
	begin
	{ Generate a character, or retrieve old one... }
	if (Length(finam) > 0) then
		begin { Retrieve character }
		generate:= get_char(finam);
		change_name;
		magic_init(randes_seed)
		end
	else
		begin { Create character }
		create_character;
		char_inven_init;
		if (class_[py.misc.pclass].mspell) then
			begin { Magic realm }
			learn_spell(msg_flag);
			gain_mana(int_adj)
			end
		else if (class_[py.misc.pclass].pspell) then
			begin { Clerical realm }
			learn_prayer;
			gain_mana(wis_adj)
			end;
		if (class_[py.misc.pclass].espell) then
			begin
			learn_extra(msg_flag);
			gain_mana(wis_adj)
			end;

		py.misc.cmana:= py.misc.mana;
		randes_seed  := GetSeed; { Description seed }
		town_seed    := GetSeed; { Town generation seed }
		magic_init(randes_seed);
		generate:= true
		end;

	with py.misc do { This determines the maximum player level }
		player_max_exp:= trunc(player_exp[max_player_level - 1] * expfact);
	end;

procedure Play;
	begin
	{ begin the game }
	clear(1, 1);
	prt_stat_block;

	{ Loop till dead, or exit }
	repeat
		if (generate) then
			begin
			generate_cave; { New level }

			if DebugSaveOnLevel then
				begin
				inSave:= True;
				DoSaveChar('_DEBUG.SAV', inSave, False);
				end;
			end;

		dungeon;           { Dungeon logic }

		generate:= true;
		until (death);

	upon_death; { Character gets buried }
	end;

procedure CrashDump;
	begin
	if not inSave then
		try
			Writeln('*** Writing player crash dump...');
			inSave:= True;
			DoSaveChar('CRASH.DUMP', inSave, False);

			Writeln('*** Writing crash dump SUCCEEDED');

			except
			Writeln('*** Writing crash dump *FAILED*!');
			end
	else
		Writeln('*** Could NOT write crash dump');
	end;


